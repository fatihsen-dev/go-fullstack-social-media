import Navbar from "@/components/Navbar/Navbar";
import Head from "next/head";
import styles from "./Update.module.scss";
import { useRouter } from "next/router";
import { toast } from "react-hot-toast";
import { postRequest, updatePostRequest } from "@/axios";
import { useEffect, useState } from "react";
import { Post } from "@/stores/posts/types";

const Create = () => {
   const router = useRouter();
   const [post, setPost] = useState<Post>();
   const [notFoundMessage, setNotFoundMessage] = useState<string>("");

   const { postid } = router.query;
   useEffect(() => {
      if (postid) {
         (async () => {
            try {
               const { data } = await postRequest(Number(postid));
               setPost(data);
               setNotFoundMessage("");
            } catch (error) {
               console.log(error);
               setNotFoundMessage("Post not found");
            }
         })();
      }
   }, [postid]);

   const submitHandle = async (e: any) => {
      e.preventDefault();

      const { title, subtitle, description } = e.target;

      if (title.value.length < 10 || title.value.length > 40) {
         toast.error("Title must be between 6 and 40 values");
         return;
      }
      if (subtitle.value.length < 15 || subtitle.value.length > 80) {
         toast.error("Subtitle ust be between 15 and 80 values");
         return;
      }
      if (description.value.length < 100 || description.value.length > 700) {
         toast.error("Description must be between 100 and 700 values");
         return;
      }

      if (post) {
         try {
            await updatePostRequest(
               {
                  title: title.value,
                  subtitle: subtitle.value,
                  description: description.value,
               },
               post.id
            );
            setTimeout(() => {
               router.push("/");
            }, 0);
         } catch (error) {
            console.log(error);
         }
      }
   };

   return (
      <>
         <Head>
            <title>Create Post</title>
            <meta name='description' content='Generated by create next app' />
            <meta name='viewport' content='width=device-width, initial-scale=1' />
            <link rel='icon' href='/favicon.ico' />
         </Head>
         <Navbar />
         <div className={styles.Container}>
            {post ? (
               <div className={styles.CreateInner}>
                  <form onSubmit={submitHandle} className={styles.Form}>
                     <input
                        name='title'
                        defaultValue={post.title}
                        placeholder='Title'
                        type='text'
                     />
                     <input
                        name='subtitle'
                        defaultValue={post.subtitle}
                        placeholder='Subtitle'
                        type='text'
                     />
                     <textarea
                        name='description'
                        placeholder='Description'
                        defaultValue={post.description}
                     />

                     <button>Update</button>
                  </form>
               </div>
            ) : (
               <h1>{notFoundMessage}</h1>
            )}
         </div>
      </>
   );
};

export default Create;
